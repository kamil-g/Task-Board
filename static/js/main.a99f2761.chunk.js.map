{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Board","props","addCard","cards","state","splice","setState","func","className","this","React","Component","Card","addTask","tasks","changeValue","title","refs","value","onChange","ref","placeholder","Task","deleteTask","alert","taskDone","taskSettings","showMore","taskExpanded","isExpanded","isRotated","taskExpandedStyle","display","arrowStyle","transform","style","AddCardButton","onClick","AddTaskButton","TaskArrow","TaskDoneButton","DeleteTaskButton","TaskSettingsButton","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a99f2761.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: [<AddCardButton func={this.addCard}/>]\n    }\n  }\n\n  addCard = () => {\n    const cards = [...this.state.cards];\n    cards.splice(0, 0, <Card />);\n    this.setState({\n      cards: cards\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"board\">\n        {this.state.cards}\n      </div>\n    )\n  }\n}\n\nclass Card extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      tasks: [<AddTaskButton func={this.addTask}/>]\n    }\n  }\n\n  addTask = () => {\n    const tasks = [...this.state.tasks];\n    tasks.splice(0, 0, <Task />);\n    this.setState({\n      tasks: tasks\n    })\n  }\n\n  changeValue = () => {\n    let title = this.refs.title.value;\n    this.setState({\n      title: title\n    })\n  }\n\n  render() {\n  return (\n    <div className=\"card\">\n    <input onChange={this.changeValue} ref=\"title\" value={this.state.title} placeholder=\"Title\"></input>\n    {this.state.tasks}\n    </div>\n  )}\n}\n\nclass Task extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      taskExpanded: false,\n      taskExpandedStyle: {\n        display: 'none'\n      },\n      arrowStyle: {\n        transform: 'rotate(0deg)'\n      }\n    }\n  }\n\n  deleteTask = () => {\n    alert(\"task done\")\n  }\n\n  taskDone = () => {\n    alert(\"task done\")\n  }\n\n  taskSettings = () => {\n    alert(\"settings opened\")\n  }\n\n  showMore = () => {\n    let taskExpanded = !this.state.taskExpanded\n    let isExpanded = ''\n    let isRotated = ''\n\n    if(taskExpanded)\n      isExpanded = \"block\"\n    else\n      isExpanded = \"none\"\n\n    if(taskExpanded)\n      isRotated = \"rotate(180deg)\"\n    else\n      isRotated = \"rotate(0deg)\"\n\n    this.setState({\n      taskExpanded: taskExpanded,\n      taskExpandedStyle: {\n        display: isExpanded\n      },\n      arrowStyle: {\n        transform: isRotated\n      }\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"task\">\n        <input placeholder=\"Title\"></input>\n        <TaskArrow arrowStyle={this.state.arrowStyle} func={this.showMore}/>\n        <div className=\"taskExpanded\" style={this.state.taskExpandedStyle}>\n          <DeleteTaskButton func={this.deleteTask}/>\n          <TaskDoneButton func={this.taskDone}/>\n          <TaskSettingsButton func={this.taskSettings}/>\n        </div>\n      </div>\n    )}\n}\n\nclass AddCardButton extends React.Component {\n  render() {\n    return (<button className=\"addCardButton\" onClick={this.props.func}> <i className=\"fas fa-plus\"></i> </button>)\n  }\n}\n\nclass AddTaskButton extends React.Component {\n  render() {\n    return (<button className=\"addTaskButton\" onClick={this.props.func}> <i className=\"fas fa-plus\"></i> </button>)\n  }\n}\n\nclass TaskArrow extends React.Component {\n  render() {\n    return (<div className=\"taskArrow\" onClick={this.props.func}><i className=\"fas fa-chevron-down\" style={this.props.arrowStyle}></i></div>)\n  }\n}\n\nclass TaskDoneButton extends React.Component {\n  render() {\n    return (<button className=\"taskDoneButton\" onClick={this.props.func}> <i className=\"fas fa-check\"></i> </button>)\n  }\n}\n\nclass DeleteTaskButton extends React.Component {\n  render() {\n    return (<button className=\"deleteTaskButton\" onClick={this.props.func}> <i className=\"fas fa-times\"></i> </button>)\n  }\n}\n\nclass TaskSettingsButton extends React.Component {\n  render() {\n    return (<button className=\"taskSettingsButton\" onClick={this.props.func}> <i className=\"fas fa-cog\"></i> </button>)\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}